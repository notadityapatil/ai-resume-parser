app/layout.tsx
// code here
import type { Metadata } from "next";
import "./globals.css";
import Navbar from "@/components/Navbar"

export const metadata: Metadata = {
  title: "Your App Name",
  description: "Your App Description",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <head />
      <body suppressHydrationWarning={true}>
      <Navbar />
      <main className="pt-16">{children}</main>
      </body>
    </html>
  );
}


app/page.tsx
// code here
'use client';

import { motion } from 'framer-motion';
import Link from 'next/link';
import { FiArrowRight, FiFileText, FiUser, FiStar } from 'react-icons/fi';

export default function Home() {
  const features = [
    { icon: FiFileText, title: "PDF Parsing", description: "Extract text from any resume PDF instantly" },
    { icon: FiUser, title: "Candidate Profile", description: "Structured overview of skills and experience" },
    { icon: FiStar, title: "AI Analysis", description: "Smart insights powered by generative AI" }
  ];

  return (
    <div>
      {/* Hero Section */}
      <section className="pt-32 pb-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto text-center">
          <motion.h1 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-4xl sm:text-5xl font-bold text-slate-800 mb-6"
          >
            Transform Your Hiring Process with<br />
            <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-cyan-500">
              AI-Powered Resume Analysis
            </span>
          </motion.h1>

          <motion.p 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-xl text-slate-600 mb-8 max-w-3xl mx-auto"
          >
            Automatically extract key candidate information and get intelligent insights from resumes in seconds.
          </motion.p>

          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="flex justify-center gap-4"
          >
            <Link
              href="/analyzer"
              className="inline-flex items-center gap-2 bg-blue-600 text-white px-8 py-4 rounded-lg hover:bg-blue-700 transition-colors"
            >
              Analyze Resume Now
              <FiArrowRight className="w-5 h-5" />
            </Link>
          </motion.div>
        </div>
      </section>

      {/* Features Grid */}
      <section className="mt-16 grid md:grid-cols-3 gap-8 max-w-7xl mx-auto">
        {features.map((feature, index) => (
          <motion.div
            key={feature.title}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="bg-white p-6 rounded-xl shadow-sm hover:shadow-md transition-shadow"
          >
            <div className="w-12 h-12 bg-blue-100 rounded-lg mb-4 flex items-center justify-center">
              <feature.icon className="w-6 h-6 text-blue-600" />
            </div>
            <h3 className="text-xl font-semibold text-slate-800 mb-2">{feature.title}</h3>
            <p className="text-slate-600">{feature.description}</p>
          </motion.div>
        ))}
      </section>
    </div>
  );
}


app/analyzer\page.tsx
// code here
import PdfTextExtractor from "@/components/PdfTextExtractor";

export default function analyzer() {
    return (
      <main className="container min-w-screen ">
        <PdfTextExtractor />
      </main>
    );
  }

app/candidatesInfo\page.tsx
// code here
"use client";

import { useState, useEffect } from 'react';
import { FiTrash2, FiUserX } from 'react-icons/fi';
import Link from 'next/link';


type Candidate = {
  id: number;
  timestamp: string;
  name?: string;
  contactInfo?: string;
  skills?: string[];
  experience?: string[];
  education?: string[];
  projects?: string[];
};

export default function candidatesInfo() {
  const [candidates, setCandidates] = useState<Candidate[]>([]);

  useEffect(() => {
    const loadCandidates = () => {
      const storedCandidates = localStorage.getItem('resumeProfiles');
      if (storedCandidates) {
        setCandidates(JSON.parse(storedCandidates));
      }
    };
    loadCandidates();
  }, []);

  const handleDelete = (id: number) => {
    const updatedCandidates = candidates.filter(candidate => candidate.id !== id);
    setCandidates(updatedCandidates);
    localStorage.setItem('resumeProfiles', JSON.stringify(updatedCandidates));
  };

  return (
    <main className="min-h-screen bg-gradient-to-b from-slate-50 to-blue-50 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-slate-800 mb-8 flex items-center gap-2">
          <FiUserX className="w-8 h-8 text-blue-600" />
          Saved Candidates
        </h1>

        {candidates.length === 0 ? (
          <div className="text-center py-12 bg-white rounded-xl shadow-sm">
            <p className="text-slate-600 mb-4">No candidates found in storage</p>
            <a href="/analyzer" className="text-blue-600 hover:text-blue-700">
              Analyze a resume to get started
            </a>
          </div>
        ) : (
          <div className="bg-white rounded-xl shadow-sm overflow-hidden">
            <table className="w-full">
              <thead className="bg-slate-50">
                <tr>
                  <th className="px-6 py-4 text-left text-slate-700 font-medium">Name</th>
                  <th className="px-6 py-4 text-left text-slate-700 font-medium">Contact</th>
                  <th className="px-6 py-4 text-left text-slate-700 font-medium">Skills</th>
                  <th className="px-6 py-4 text-left text-slate-700 font-medium">Experience</th>
                  <th className="px-6 py-4 text-left text-slate-700 font-medium">Date Added</th>
                  <th className="px-6 py-4 text-left text-slate-700 font-medium">Actions</th>
                </tr>
              </thead>
              <tbody>
                {candidates.map((candidate) => (
 <tr 
 key={candidate.id} 
 className="border-t border-slate-100 hover:bg-slate-50"
>
 <td className="px-6 py-4 text-slate-800">
   <Link 
     href={`/candidates/${candidate.id}`}
     className="text-blue-600 hover:text-blue-700 hover:underline"
   >
     {candidate.name || 'N/A'}
   </Link>
 </td>
                    <td className="px-6 py-4 text-slate-600 max-w-[200px] truncate">
                      {candidate.contactInfo || 'N/A'}
                    </td>
                    <td className="px-6 py-4">
                      <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm">
                        {candidate.skills?.length || 0} skills
                      </span>
                    </td>
                    <td className="px-6 py-4">
                      <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-sm">
                        {candidate.experience?.length || 0} positions
                      </span>
                    </td>
                    <td className="px-6 py-4 text-slate-600">
                      {new Date(candidate.timestamp).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4">
                      <button
                        onClick={() => handleDelete(candidate.id)}
                        className="text-red-600 hover:text-red-700 flex items-center gap-2"
                      >
                        <FiTrash2 className="w-4 h-4" />
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </main>
  );
}

app/candidatesInfo\[id]\page.tsx
// code here
// app/candidates/[id]/page.tsx
'use client';

import { useParams, useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { FiArrowLeft, FiUser, FiPhone, FiTool, FiBriefcase, FiBook, FiCode } from 'react-icons/fi';
import { motion } from 'framer-motion';

type Candidate = {
  id: number;
  timestamp: string;
  name?: string;
  contactInfo?: string;
  skills?: string[];
  experience?: string[];
  education?: string[];
  projects?: string[];
};

export default function CandidateDetail() {
  const router = useRouter();
  const params = useParams();
  const [candidate, setCandidate] = useState<Candidate | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const storedCandidates = localStorage.getItem('resumeProfiles');
    if (storedCandidates) {
      const candidates: Candidate[] = JSON.parse(storedCandidates);
      const foundCandidate = candidates.find(c => c.id.toString() === params.id);
      setCandidate(foundCandidate || null);
    }
    setLoading(false);
  }, [params.id]);

  if (loading) {
    return <div className="min-h-screen bg-gradient-to-b from-slate-50 to-blue-50 p-8">Loading...</div>;
  }

  if (!candidate) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-slate-50 to-blue-50 p-8">
        <div className="max-w-4xl mx-auto text-center py-12">
          <h1 className="text-2xl font-bold text-slate-800 mb-4">Candidate not found</h1>
          <button
            onClick={() => router.back()}
            className="text-blue-600 hover:text-blue-700 flex items-center gap-2 justify-center"
          >
            <FiArrowLeft className="w-4 h-4" />
            Back to candidates list
          </button>
        </div>
      </div>
    );
  }

  return (
    <main className="min-h-screen bg-gradient-to-b from-slate-50 to-blue-50 p-8">
      <div className="max-w-4xl mx-auto">
        <button
          onClick={() => router.back()}
          className="mb-8 text-blue-600 hover:text-blue-700 flex items-center gap-2"
        >
          <FiArrowLeft className="w-4 h-4" />
          Back to candidates
        </button>

        <motion.div 
          className="bg-white rounded-xl shadow-lg p-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <h1 className="text-3xl font-bold text-slate-800 mb-6 flex items-center gap-2">
            <FiUser className="w-8 h-8 text-blue-600" />
            {candidate.name || 'Unnamed Candidate'}
          </h1>

          <div className="space-y-6">
            {candidate.contactInfo && (
              <Section 
                title="Contact Information" 
                content={candidate.contactInfo}
                icon={FiPhone}
                color="bg-blue-100 text-blue-600"
              />
            )}

            <Section
              title="Skills"
              items={candidate.skills}
              icon={FiTool}
              color="bg-green-100 text-green-600"
            />

            <Section
              title="Experience"
              items={candidate.experience}
              icon={FiBriefcase}
              color="bg-purple-100 text-purple-600"
            />

            <Section
              title="Education"
              items={candidate.education}
              icon={FiBook}
              color="bg-orange-100 text-orange-600"
            />

            <Section
              title="Projects"
              items={candidate.projects}
              icon={FiCode}
              color="bg-cyan-100 text-cyan-600"
            />
          </div>
        </motion.div>
      </div>
    </main>
  );
}

function Section({ 
  title, 
  content, 
  items, 
  icon: Icon,
  color
}: { 
  title: string; 
  content?: string; 
  items?: string[];
  icon: React.ElementType;
  color: string;
}) {
  const hasContent = content || (items && items.length > 0);

  return (
    <motion.div 
      className="group relative"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ delay: 0.2 }}
    >
      <div className="flex gap-4">
        <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${color}`}>
          <Icon className="w-5 h-5" />
        </div>

        <div className="flex-1">
          <h4 className="text-lg font-semibold text-slate-800 mb-2">{title}</h4>
          
          {!hasContent && (
            <p className="text-slate-400 text-sm">No {title.toLowerCase()} information provided</p>
          )}

          {content && (
            <p className="text-slate-600 mb-3 leading-relaxed">{content}</p>
          )}

          {items && items.length > 0 && (
            <ul className="space-y-2">
              {items.map((item, index) => (
                <motion.li
                  key={index}
                  className="flex items-start before:content-['▹'] before:text-blue-400 before:mr-2 before:mt-1"
                  whileHover={{ x: 5 }}
                >
                  <span className="text-slate-600">{item}</span>
                </motion.li>
              ))}
            </ul>
          )}
        </div>
      </div>

      <div className="absolute inset-x-0 bottom-0 h-px bg-slate-100 transition-colors group-hover:bg-blue-100" />
    </motion.div>
  );
}

app/FileUpload.tsx
// code here
import React, { useState, useCallback } from "react";
import { FiUploadCloud, FiFile, FiX } from "react-icons/fi";

type FileUploadProps = {
  onFileChange: (file: File) => void;
  disabled?: boolean;
};

export function FileUpload({ onFileChange, disabled }: FileUploadProps) {
  const [isDragging, setIsDragging] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file && file.type === "application/pdf") {
      setSelectedFile(file);
      onFileChange(file);
    }
  };

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    
    const file = e.dataTransfer.files?.[0];
    if (file && file.type === "application/pdf") {
      setSelectedFile(file);
      onFileChange(file);
    }
  }, [onFileChange]);

  const removeFile = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    setSelectedFile(null);
    onFileChange(null!); // Reset the file selection
  }, [onFileChange]);

  return (
    <div 
      className={`relative w-full max-w-2xl transition-all duration-300  ml-[100px] ${
        disabled ? "opacity-50 cursor-not-allowed" : "cursor-pointer"
      }`}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
    >
      <label
        className={`flex flex-col items-center justify-center p-8 border-4 border-dashed rounded-2xl space-y-4
          ${isDragging ? "border-blue-500 bg-blue-50" : "border-gray-300 hover:border-gray-400 bg-white"}
          ${disabled ? "pointer-events-none" : ""}`}
      >
        <div className="relative">
          <FiUploadCloud className={`w-12 h-12 mb-4 ${
            isDragging ? "text-blue-500 animate-bounce" : "text-gray-400"
          }`} />
          
          {selectedFile && (
            <div className="absolute -top-2 -right-2 bg-white rounded-full p-1 shadow-md">
              <FiFile className="w-6 h-6 text-blue-500" />
            </div>
          )}
        </div>

        <div className="text-center">
          {selectedFile ? (
            <div className="flex items-center gap-2">
              <span className="font-medium text-gray-700">{selectedFile.name}</span>
              <button
                type="button"
                onClick={removeFile}
                className="p-1 hover:bg-gray-100 rounded-full"
                aria-label="Remove file"
              >
                <FiX className="w-5 h-5 text-red-500" />
              </button>
            </div>
          ) : (
            <>
              <p className="text-lg font-semibold text-gray-700">
                Drag and drop your PDF here
              </p>
              <p className="text-gray-500">or click to browse</p>
              <p className="text-sm text-gray-400 mt-2">(Only *.pdf files accepted)</p>
            </>
          )}
        </div>

        <input
          type="file"
          accept=".pdf"
          onChange={handleChange}
          disabled={disabled}
          className="hidden"
          aria-label="PDF file input"
        />
      </label>

      {/* Animated border effect */}
      {isDragging && (
        <div className="absolute inset-0 border-4 border-blue-200 rounded-2xl animate-pulse pointer-events-none" />
      )}
    </div>
  );
}

app/Navbar.tsx
// code here
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { FiFileText } from 'react-icons/fi';

export default function Navbar() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  return (
    <nav className="bg-white shadow-sm fixed w-full z-10">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex-shrink-0 flex items-center">
            <Link href="/" className="text-2xl font-bold text-blue-600 flex items-center gap-2">
              <FiFileText className="w-6 h-6" />
              ResumeIQ
            </Link>
          </div>

          {/* Desktop Menu */}
          <div className="hidden md:flex items-center space-x-8">
            <Link href="/" className="text-slate-600 hover:text-blue-600 transition-colors font-medium">
              Home
            </Link>
            <Link href="/analyzer" className="text-slate-600 hover:text-blue-600 transition-colors font-medium">
              Resume Analyzer
            </Link>
            <Link href="/about" className="text-slate-600 hover:text-blue-600 transition-colors font-medium">
              About
            </Link>
          </div>

          {/* Mobile Menu Button */}
          <div className="md:hidden flex items-center">
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="inline-flex items-center justify-center p-2 rounded-md text-slate-600 hover:text-blue-600 hover:bg-slate-100"
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                {isMenuOpen ? (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                ) : (
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                )}
              </svg>
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Menu */}
      {isMenuOpen && (
        <div className="md:hidden bg-white border-t">
          <div className="px-2 pt-2 pb-3 space-y-1">
            <Link href="/" className="block px-3 py-2 rounded-md text-slate-600 hover:bg-slate-50">
              Home
            </Link>
            <Link href="/analyzer" className="block px-3 py-2 rounded-md text-slate-600 hover:bg-slate-50">
              Resume Analyzer
            </Link>
            <Link href="/about" className="block px-3 py-2 rounded-md text-slate-600 hover:bg-slate-50">
              About
            </Link>
          </div>
        </div>
      )}
    </nav>
  );
}


app/PdfTextExtractor.tsx
// code here
"use client";

import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { extractTextFromPdf } from "@/services/pdf-service";
import { generateStructuredSummary } from "@/services/gemini-service";
import { FileUpload } from "@/components/FileUpload";
import { StructuredSummary } from "@/components/StructuredSummary";
import { SummarySections } from "@/lib/types";
import { FiAlertTriangle, FiRefreshCw, FiUser } from "react-icons/fi";
import Link from "next/link";

const containerVariants = {
  hidden: { opacity: 0 },
  visible: { opacity: 1, transition: { staggerChildren: 0.1 } },
};

const childVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: { y: 0, opacity: 1 },
};

export default function PdfTextExtractor() {
  const [summary, setSummary] = useState<Maybe<SummarySections>>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<Maybe<string>>(null);

  const handleFileUpload = async (file: File) => {
    if (file.type !== "application/pdf") {
      setError("Please select a valid PDF file.");
      return;
    }

    setIsLoading(true);
    setError(null);
    setSummary(null);

    try {
      const extractedText = await extractTextFromPdf(file);
      const apiKey = process.env.NEXT_PUBLIC_API_KEY;
      if (!apiKey) throw new Error("API key not configured");
      
      const structuredSummary = await generateStructuredSummary(extractedText, apiKey);
      setSummary(structuredSummary);
    } catch (err) {
      console.error("Processing error:", err);
      setError(err instanceof Error ? err.message : "An unexpected error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <motion.div 
      className="min-h-screen bg-gradient-to-b from-slate-50 to-blue-50 p-8"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <div className="max-w-4xl mx-auto">
        <motion.h1 
          className="text-4xl font-bold text-slate-800 mb-8 text-center"
          variants={childVariants}
        >
          <span className="bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-cyan-500">
            Resume Analyzer Tool
          </span>
        </motion.h1>

        <motion.div variants={childVariants}>
          <FileUpload 
            onFileChange={handleFileUpload} 
            disabled={isLoading} 
          />
        </motion.div>

        <AnimatePresence>
          {isLoading && (
            <motion.div
              className="mt-8 flex flex-col items-center gap-4"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <FiRefreshCw className="w-12 h-12 text-blue-500 animate-spin" />
              <div className="space-y-2 text-center">
                <p className="font-medium text-slate-700">Analyzing Resume</p>
                <p className="text-sm text-slate-500">Extracting insights...</p>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        <AnimatePresence>
          {error && (
            <motion.div
              className="mt-6 p-4 bg-red-50 border border-red-200 rounded-xl flex items-start gap-3"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0 }}
            >
              <FiAlertTriangle className="w-5 h-5 text-red-500 mt-0.5" />
              <div>
                <p className="font-medium text-red-700">Error occurred</p>
                <p className="text-red-600 text-sm">{error}</p>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {summary && (
          <motion.div 
            className="mt-8 space-y-8"
            variants={containerVariants}
          >
            <motion.div variants={childVariants}>
              <StructuredSummary data={summary} />
            </motion.div>

            <motion.div 
              className="text-center flex flex-col gap-4 items-center"
              variants={childVariants}
            >
              <div className="flex gap-4">
                <Link
                  href="/candidatesInfo"
                  className="inline-flex items-center gap-2 text-white bg-blue-600 hover:bg-blue-700 transition-colors px-6 py-2 rounded-full shadow-sm hover:shadow-md transition-all"
                >
                  <FiUser className="w-4 h-4" />
                  View Candidate Info
                </Link>

                <button
                  onClick={() => setSummary(null)}
                  className="inline-flex items-center gap-2 text-slate-600 hover:text-slate-800 transition-colors px-6 py-2 bg-white rounded-full shadow-sm hover:shadow-md transition-all"
                >
                  <FiRefreshCw className="w-4 h-4" />
                  Analyze Another
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </div>
    </motion.div>
  );
}

app/StructuredSummary.tsx
// code here
import React, { useState } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { FiUser, FiPhone, FiTool, FiBriefcase, FiBook, FiCode, FiSave } from "react-icons/fi";
import { SummarySections } from "@/lib/types";


const sectionIcons = {
  "Name": FiUser,
  "Contact Info": FiPhone,
  "Skills": FiTool,
  "Experience": FiBriefcase,
  "Education": FiBook,
  "Projects": FiCode,
};

const sectionColors = {
  "Name": "bg-pink-100 text-pink-600",
  "Contact Info": "bg-blue-100 text-blue-600",
  "Skills": "bg-green-100 text-green-600",
  "Experience": "bg-purple-100 text-purple-600",
  "Education": "bg-orange-100 text-orange-600",
  "Projects": "bg-cyan-100 text-cyan-600",
};

export function StructuredSummary({ data }: { data: SummarySections }) {
  const [showSuccess, setShowSuccess] = useState(false);

  const handleSaveProfile = () => {
    try {
      // Get existing profiles from localStorage
      const storedProfiles = localStorage.getItem('resumeProfiles');
      const profiles = storedProfiles ? JSON.parse(storedProfiles) : [];
      
      // Create new profile with timestamp
      const newProfile = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        ...data
      };

      // Save updated profiles array
      localStorage.setItem('resumeProfiles', JSON.stringify([...profiles, newProfile]));
      
      // Show success feedback
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 2000);
    } catch (error) {
      console.error('Failed to save profile:', error);
      alert('Error saving profile. Please try again.');
    }
  };




  return (
    <motion.div 
      className="bg-white rounded-xl shadow-lg p-6 relative"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      {/* Header section remains the same */}
      <h3 className="text-2xl font-bold text-slate-800 mb-6 flex items-center gap-2">
        <FiUser className="w-6 h-6 text-blue-500" />
        Candidate Profile
      </h3>

      <div className="space-y-6">
        {data.name && (
          <Section 
            title="Name" 
            content={data.name}
            icon={sectionIcons.Name}
            color={sectionColors.Name}
          />
        )}

        {data.contactInfo && (
          <Section
            title="Contact Info"
            content={data.contactInfo}
            icon={sectionIcons["Contact Info"]}
            color={sectionColors["Contact Info"]}
          />
        )}

        <Section
          title="Skills"
          items={data.skills}
          icon={sectionIcons.Skills}
          color={sectionColors.Skills}
        />

        <Section
          title="Experience"
          items={data.experience}
          icon={sectionIcons.Experience}
          color={sectionColors.Experience}
        />

        <Section
          title="Education"
          items={data.education}
          icon={sectionIcons.Education}
          color={sectionColors.Education}
        />

        <Section
          title="Projects"
          items={data.projects}
          icon={sectionIcons.Projects}
          color={sectionColors.Projects}
        />
      </div>

      <div className="mt-8 flex justify-end">
        <motion.button
          onClick={handleSaveProfile}
          className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <FiSave className="w-4 h-4" />
          Save Profile
        </motion.button>
      </div>

      {/* Success Notification */}
      <AnimatePresence>
        {showSuccess && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute bottom-4 right-4 bg-green-100 text-green-700 px-4 py-2 rounded-lg flex items-center gap-2"
          >
            <FiSave className="w-4 h-4" />
            Profile saved successfully!
          </motion.div>
        )}
      </AnimatePresence>


    </motion.div>
  );
}

function Section({ 
  title, 
  content, 
  items, 
  icon: Icon,
  color
}: { 
  title: string; 
  content?: string; 
  items?: string[];
  icon: React.ElementType;
  color: string;
}) {
  const hasContent = content || (items && items.length > 0);

  return (
    <motion.div 
      className="group relative"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ delay: 0.2 }}
    >
      <div className="flex gap-4">
        <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${color}`}>
          <Icon className="w-5 h-5" />
        </div>

        <div className="flex-1">
          <h4 className="text-lg font-semibold text-slate-800 mb-2">{title}</h4>
          
          {!hasContent && (
            <p className="text-slate-400 text-sm">No {title.toLowerCase()} information provided</p>
          )}

          {content && (
            <p className="text-slate-600 mb-3 leading-relaxed">{content}</p>
          )}

          {items && items.length > 0 && (
            <ul className="space-y-2">
              {items.map((item, index) => (
                <motion.li
                  key={index}
                  className="flex items-start before:content-['▹'] before:text-blue-400 before:mr-2 before:mt-1"
                  whileHover={{ x: 5 }}
                >
                  <span className="text-slate-600">{item}</span>
                </motion.li>
              ))}
            </ul>
          )}
        </div>
      </div>

      <div className="absolute inset-x-0 bottom-0 h-px bg-slate-100 transition-colors group-hover:bg-blue-100" />
    </motion.div>
  );
}

app/types.ts
// code here
export type Maybe<T> = T | null;

export type SummarySections = {
  name?: string;
  contactInfo?: string;
  skills?: string[];
  experience?: string[];
  education?: string[];
  projects?: string[];
};

app/gemini-service.ts
// code here
import { GoogleGenerativeAI } from "@google/generative-ai";
import { SummarySections } from "@/lib/types";

export async function generateStructuredSummary(
  text: string,
  apiKey: string
): Promise<SummarySections> {
  const genAI = new GoogleGenerativeAI(apiKey);
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

  const prompt = `Analyze this resume and return STRUCTURED JSON DATA ONLY with these EXACT keys:
  {
    "name": string,
    "contactInfo": string,
    "skills": string[],
    "experience": string[],
    "education": string[],
    "projects": string[]
  }
  
  Resume text:
  ${text}
  
  Return ONLY valid JSON. Do NOT include any explanations, markdown, or text outside the JSON object.`;

  try {
    const result = await model.generateContent(prompt);
    const response = await result.response;
    console.log("Raw summary:", response.text());
    const jsonString = response.text()
    .replace(/```json/g, '')
    .replace(/```/g, '')
    .replace(/^[\s\S]*?\{/, '{') // Remove any text before the first {
    .replace(/\}[\s\S]*$/g, '}'); // Remove any text after the last }
    console.log("Structured summary:", jsonString);
    return JSON.parse(jsonString) as SummarySections;
  } catch (error) {
    console.error("Error generating summary:", error);
    throw new Error("Failed to generate structured summary");
  }
}


app/pdf-service.ts
// code here
import * as pdfjsLib from "pdfjs-dist";

let isInitialized = false;

async function initializePdfJs() {
  if (isInitialized) return;
  const pdfjs = await import("pdfjs-dist/build/pdf");
  pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;
  isInitialized = true;
}

export async function extractTextFromPdf(file: File): Promise<string> {
  await initializePdfJs();
  
  try {
    const arrayBuffer = await file.arrayBuffer();
    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
    let fullText = "";

    for (let i = 1; i <= pdf.numPages; i++) {
      const page = await pdf.getPage(i);
      const textContent = await page.getTextContent();
      fullText += textContent.items
        .map((item) => ("str" in item ? item.str : ""))
        .join(" ") + "\n";
    }

    return fullText;
  } catch (error) {
    throw new Error("Failed to extract text from PDF");
  }
}

